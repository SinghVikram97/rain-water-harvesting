{"version":3,"sources":["components/Playground.js","components/Advanced.js","components/Navbar.js","components/Home.js","components/GrievanceCard.js","components/Grievance.js","components/OptimalMap.js","App.js","serviceWorker.js","index.js"],"names":["waypoints","Navbar","react_default","a","createElement","className","style","marginLeft","paddingLeft","Link","to","Component","Home","window","executeHome","marginTop","overflowX","id","width","height","GrievanceCard","class","fontFamily","href","Grievance","Object","defineProperty","textDecoration","fontWeight","fontSize","marginBottom","GrievanceCard_GrievanceCard","locations","MyMapComponent","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","lat","lng","map","latlng","position","latitude","longitude","OptimalMap","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","res","json","data","setState","isMarkerShown","googleMapURL","loadingElement","containerElement","marginRight","mapElement","directions","updateMap","google","maps","DirectionsService","route","origin","destination","travelMode","TravelMode","WALKING","result","status","DirectionsStatus","OK","console","error","concat","handleClick","e","latLng","push","location","LatLng","directionsService","_this3","GoogleMapExample","onClick","startLat","startLng","endLat","endLng","Number","handleStart","input","target","value","Geocoder","geocode","address","results","geometry","log","handleEnd","handleBtnClick","textAlign","display","type","onChange","App","MapLoader","Playground","MapLoader2","Advanced","BrowserRouter","Navbar_Navbar","Switch","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4e25e44.chunk.js","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nlet waypoints;\nexport default class OptimalMap extends Component {\n  state = {\n    directions: null\n  };\n  updateMap = waypoints => {\n    const directionsService = new google.maps.DirectionsService();\n    const origin = { lat: 28.7041, lng: 77.1025 };\n    const destination = { lat: 30.7333, lng: 76.7794 };\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n        waypoints: waypoints\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    const origin = { lat: 28.7041, lng: 77.1025 };\n    const destination = { lat: 30.7333, lng: 76.7794 };\n    waypoints = [\n      {\n        location: new google.maps.LatLng(30.3782, 76.7767)\n      },\n      {\n        location: new google.maps.LatLng(29.0588, 76.0856)\n      }\n    ];\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n        waypoints: waypoints\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n\n  handleClick = e => {\n    let lat = e.latLng.lat();\n    let lng = e.latLng.lng();\n    waypoints.push({\n      location: new google.maps.LatLng(lat, lng)\n    });\n    this.updateMap(waypoints);\n  };\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 28.7041, lng: 77.1025 }}\n        defaultZoom={8}\n        onClick={this.handleClick}\n      >\n        <DirectionsRenderer directions={this.state.directions} />\n      </GoogleMap>\n    ));\n\n    return (\n      <div>\n        <GoogleMapExample\n          containerElement={\n            <div\n              style={{ height: `980px`, width: \"100%\", marginRight: \"10px\" }}\n            />\n          }\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n      </div>\n    );\n  }\n}\n","/*global google*/\nimport React, { Component } from \"react\";\nimport \"./Advanced.css\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nlet waypoints;\nexport default class OptimalMap extends Component {\n  state = {\n    directions: null,\n    startLat: 28.7041,\n    startLng: 77.1025,\n    endLat: 30.7333,\n    endLng: 76.7794\n  };\n  updateMap = waypoints => {\n    let latStart = Number(this.state.startLat);\n    let lngStart = Number(this.state.startLng);\n\n    let latEnd = Number(this.state.endLat);\n    let lngEnd = Number(this.state.endLng);\n\n    const directionsService = new google.maps.DirectionsService();\n\n    const origin = { lat: latStart, lng: lngStart };\n    const destination = { lat: latEnd, lng: lngEnd };\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n        waypoints: waypoints\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  };\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    const origin = { lat: this.state.startLat, lng: this.state.startLng };\n    const destination = { lat: this.state.endLat, lng: this.state.endLng };\n    waypoints = [\n      // {\n      //   location: new google.maps.LatLng(30.3782, 76.7767)\n      // },\n      // {\n      //   location: new google.maps.LatLng(29.0588, 76.0856)\n      // }\n    ];\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n        waypoints: waypoints\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n\n  handleClick = e => {\n    let lat = e.latLng.lat();\n    let lng = e.latLng.lng();\n    waypoints.push({\n      location: new google.maps.LatLng(lat, lng)\n    });\n    this.updateMap(waypoints);\n  };\n\n  handleStart = e => {\n    let input = e.target.value;\n    let geocoder;\n    function initialize() {\n      geocoder = new google.maps.Geocoder();\n    }\n    initialize();\n    geocoder.geocode(\n      {\n        address: input\n      },\n      (results, status) => {\n        let lat = results[0].geometry.location.lat();\n        let lng = results[0].geometry.location.lng();\n        this.setState({ startLat: lat });\n        this.setState({ startLng: lng });\n      }\n    );\n    // let res = input.split(\" \");\n    // if (res.length >= 2) {\n    //   let lat = res[0];\n    //   let lng = res[1];\n    //   this.setState({ startLat: lat });\n    //   this.setState({ startLng: lng });\n    // }\n    console.log(input);\n  };\n\n  handleEnd = e => {\n    let input = e.target.value;\n    let geocoder;\n    function initialize() {\n      geocoder = new google.maps.Geocoder();\n    }\n    initialize();\n    geocoder.geocode(\n      {\n        address: input\n      },\n      (results, status) => {\n        let lat = results[0].geometry.location.lat();\n        let lng = results[0].geometry.location.lng();\n        this.setState({ endLat: lat });\n        this.setState({ endLng: lng });\n      }\n    );\n    // let res = input.split(\" \");\n    // if (res.length >= 2) {\n    //   let lat = res[0];\n    //   let lng = res[1];\n    //   this.setState({ endLat: lat });\n    //   this.setState({ endLng: lng });\n    // }\n    console.log(input);\n  };\n\n  handleBtnClick = () => {\n    console.log(this.state.startLat, this.state.startLng);\n    console.log(this.state.endLat, this.state.endLng);\n    this.updateMap(waypoints);\n  };\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 28.7041, lng: 77.1025 }}\n        defaultZoom={8}\n        onClick={this.handleClick}\n      >\n        <DirectionsRenderer directions={this.state.directions} />\n      </GoogleMap>\n    ));\n\n    return (\n      <div>\n        <div\n          className=\"row mt4 mb4\"\n          style={{ textAlign: \"center\", paddingLeft: \"5%\" }}\n        >\n          <div className=\"col-3 pl4 offset-2\" style={{ textAlign: \"center\" }}>\n            <h3 style={{ display: \"inline-block\", fontFamily: \"monospace\" }}>\n              Start:\n            </h3>\n            <input type=\"text\" onChange={this.handleStart} />\n          </div>\n          <div className=\"col-3\" style={{ textAlign: \"center\" }}>\n            <h3 style={{ display: \"inline-block\", fontFamily: \"monospace\" }}>\n              End:\n            </h3>\n            <input type=\"text\" onChange={this.handleEnd} />\n          </div>\n          <div className=\"col-3\">\n            <button\n              type=\"button\"\n              class=\"btn btn-primary\"\n              onClick={this.handleBtnClick}\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n        <GoogleMapExample\n          containerElement={\n            <div\n              style={{ height: `980px`, width: \"100%\", marginRight: \"10px\" }}\n            />\n          }\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <div className=\"sidenav\">\n        <ul style={{ marginLeft: 0, paddingLeft: 0 }} className=\" mt3\">\n          <li className=\"pt4\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"pt4\">\n            <Link to=\"/grievance\">Grievance</Link>\n          </li>\n          <li className=\"pt4\">\n            <Link to=\"/optimalmap\">Locations</Link>\n          </li>\n          <li className=\"pt4\">\n            <Link to=\"/playground\">Playground</Link>\n          </li>\n          <li className=\"pt4\">\n            <Link to=\"/advanced\">Advanced</Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  componentDidMount() {\n    window.executeHome();\n  }\n  render() {\n    return (\n      <div\n        style={{ marginLeft: \"250px\", marginTop: \"60px\", overflowX: \"hidden\" }}\n      >\n        <canvas id=\"myChart\" width=\"400\" height=\"200\" />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class GrievanceCard extends Component {\n  render() {\n    return (\n      <div className=\"row justify-content-center mt5\">\n        <div className=\"col\">\n          <div class=\"card\" style={{ width: \"100rem\" }}>\n            <div class=\"card-body\">\n              <h4\n                class=\"card-title pt3\"\n                style={{ fontFamily: \"Montserrat', sans-serif \" }}\n              >\n                Main Problem Heading\n              </h4>\n              <p class=\"card-text\">Problem Description</p>\n              <a href=\"#\" class=\"card-link\">\n                View More\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport GrievanceCard from \"./GrievanceCard\";\n\nexport default class Grievance extends Component {\n  render() {\n    return (\n      <div style={{ marginLeft: \"250px\", marginTop: \"80px\" }}>\n        <h1\n          style={{\n            textDecoration: \"underline\",\n            fontFamily: \"monospace\",\n            fontWeight: \"bold\",\n            fontSize: \"300%\",\n            marginBottom: \"70px\",\n            fontFamily: \"Montserrat, sans-serif\"\n          }}\n        >\n          Grievances\n        </h1>\n        <GrievanceCard />\n        <GrievanceCard />\n      </div>\n    );\n  }\n}\n","/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\n\nlet locations = [];\n\nconst MyMapComponent = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap defaultZoom={8} defaultCenter={{ lat: 28.7041, lng: 77.1025 }}>\n      {locations.map(latlng => {\n        return (\n          <Marker position={{ lat: latlng.latitude, lng: latlng.longitude }} />\n        );\n      })}\n    </GoogleMap>\n  ))\n);\nexport default class OptimalMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locations: []\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://rwholt-api.herokuapp.com/possible-locations\")\n      .then(res => res.json())\n      .then(data => {\n        locations = data;\n        this.setState({\n          locations: locations\n        });\n        //console.log(locations);\n        //data_recieved = true;\n      });\n  }\n  render() {\n    if (!this.state.locations) return null;\n    let locations = this.state.locations;\n    return (\n      <MyMapComponent\n        isMarkerShown\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDurZQBXjtSzKeieXwtFeGe-jhZu-HEGQU\"\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={\n          <div\n            style={{\n              height: \"980px\",\n              marginLeft: 0,\n              paddingLeft: 0,\n              marginRight: \"10px\"\n            }}\n          />\n        }\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Grievance from \"./components/Grievance\";\nimport OptimalMap from \"./components/OptimalMap\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Playground from \"./components/Playground\";\nimport { withScriptjs } from \"react-google-maps\";\nimport Advanced from \"./components/Advanced\";\nclass App extends Component {\n  render() {\n    const MapLoader = withScriptjs(Playground);\n    const MapLoader2 = withScriptjs(Advanced);\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/grievance\" component={Grievance} />\n            <Route exact path=\"/optimalmap\" component={OptimalMap} />\n            <Route\n              exact\n              path=\"/playground\"\n              component={() => (\n                <MapLoader\n                  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDurZQBXjtSzKeieXwtFeGe-jhZu-HEGQU\"\n                  loadingElement={<div style={{ height: `100%` }} />}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/advanced\"\n              component={() => (\n                <MapLoader2\n                  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDurZQBXjtSzKeieXwtFeGe-jhZu-HEGQU\"\n                  loadingElement={<div style={{ height: `100%` }} />}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}